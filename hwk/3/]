-- Q0
import Data.Char
isInt :: Char -> Bool
getInt = fromInteger . toInteger
isInt c = (getInt(ord c - ord '0')::Word) < 10
-- ord '0' = 48
-- ord '1' = 49, '2' = 50, ...
-- ord '\t' = 9 ...which explains why I wanted to pull my hair out earlier...
--(Just ("",[])) s)

-- aux :: Maybe (String, [String]) -> Char -> Maybe (String, [String])
-- aux acc c =  

aux' :: String -> Maybe (String)
aux' (s:ss) = Just $ rev (s:ss) 
aux' "" = Nothing
         

--rmx :: String -> Char -> Maybe (String)
--rmx'' (s:ss) c = Just $ rev (

rev :: [a] -> [a]
rev = foldl (flip (:)) [] 

rmv :: String -> Char -> Maybe (String)
rmv (s:ss) c 
   | s == c = rmv ss c
   | otherwise = Nothing 
